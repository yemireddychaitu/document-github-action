name: 'Build and Deploy to Cloud Run'

on:
  push:
    branches:
      - '*'
env:
  PROJECT_ID:  ${{ vars.PROJECT_ID }} # TODO: update to your Google Cloud project ID
  REGION: 'us-central1' # TODO: update to your region
  SERVICE: ${{ vars.SERVICE }} # TODO: update to your service name
  WORKLOAD_IDENTITY_PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }} # TODO: update to your workload identity provider
  REPO: 'documetn-github-actions' # Name of th repository in the Artifact Registry
  CRNAME: 'docgithubcr' # The Cloud Service deploy with the provided name  
  
jobs:
  deploy:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: 'actions/checkout@v3'

    # Configure Workload Identity Federation via a credentials file.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ vars.SERVICE }}
        
    - name: Configure Docker for Google Artifact Registry
      run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

    - name: 'Build and Push Container'
      run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/myfimage:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" .
          docker push "${DOCKER_TAG}"
    - name: 'Deploy to Cloud Run'

        # END - Docker auth and build

      uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
      with:
          service: '${{ env.CRNAME }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a pre-built image, update the image name below:
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/myfimage:${{ github.sha }}'
      # If required, use the Cloud Run URL output in later steps
    - name: 'Show output'
      run: |2-

          echo ${{ steps.deploy.outputs.url }}
        
